// /**
//  * `$modify` lets you extend and modify GD's classes.
//  * To hook a function in Geode, simply $modify the class
//  * and write a new function definition with the signature of
//  * the function you want to hook.
//  *
//  * Here we use the overloaded `$modify` macro to set our own class name,
//  * so that we can use it for button callbacks.
//  *
//  * Notice the header being included, you *must* include the header for
//  * the class you are modifying, or you will get a compile error.
//  *
//  * Another way you could do this is like this:
//  *
//  * struct MyMenuLayer : Modify<MyMenuLayer, MenuLayer> {};
//  */
// #include <Geode/modify/MenuLayer.hpp>
// class $modify(MyMenuLayer, MenuLayer) {
// 	/**
// 	 * Typically classes in GD are initialized using the `init` function, (though not always!),
// 	 * so here we use it to add our own button to the bottom menu.
// 	 *
// 	 * Note that for all hooks, your signature has to *match exactly*,
// 	 * `void init()` would not place a hook!
// 	*/
// 	bool init() {
// 		/**
// 		 * We call the original init function so that the
// 		 * original class is properly initialized.
// 		 */
// 		if (!MenuLayer::init()) {
// 			return false;
// 		}

// 		/**
// 		 * You can use methods from the `geode::log` namespace to log messages to the console,
// 		 * being useful for debugging and such. See this page for more info about logging:
// 		 * https://docs.geode-sdk.org/tutorials/logging
// 		*/
// 		log::debug("Hello from my MenuLayer::init hook! This layer has {} children.", this->getChildrenCount());

// 		/**
// 		 * See this page for more info about buttons
// 		 * https://docs.geode-sdk.org/tutorials/buttons
// 		*/
// 		auto myButton = CCMenuItemSpriteExtra::create(
// 			CCSprite::createWithSpriteFrameName("GJ_likeBtn_001.png"),
// 			this,
// 			/**
// 			 * Here we use the name we set earlier for our modify class.
// 			*/
// 			menu_selector(MyMenuLayer::onMyButton)
// 		);

// 		/**
// 		 * Here we access the `bottom-menu` node by its ID, and add our button to it.
// 		 * Node IDs are a Geode feature, see this page for more info about it:
// 		 * https://docs.geode-sdk.org/tutorials/nodetree
// 		*/
// 		auto menu = this->getChildByID("bottom-menu");
// 		menu->addChild(myButton);

// 		/**
// 		 * The `_spr` string literal operator just prefixes the string with
// 		 * your mod id followed by a slash. This is good practice for setting your own node ids.
// 		*/
// 		myButton->setID("my-button"_spr);

// 		/**
// 		 * We update the layout of the menu to ensure that our button is properly placed.
// 		 * This is yet another Geode feature, see this page for more info about it:
// 		 * https://docs.geode-sdk.org/tutorials/layouts
// 		*/
// 		menu->updateLayout();

// 		/**
// 		 * We return `true` to indicate that the class was properly initialized.
// 		 */
// 		return true;
// 	}

// 	/**
// 	 * This is the callback function for the button we created earlier.
// 	 * The signature for button callbacks must always be the same,
// 	 * return type `void` and taking a `CCObject*`.
// 	*/
// 	void onMyButton(CCObject*) {
// 		FLAlertLayer::create("Geode", "Hello from my custom mod!", "OK")->show();
// 	}
// };

// // Controls pausing in game.
// #include <Geode/modify/PlayLayer.hpp> 
// class $modify(TimerPlayLayer, PlayLayer) {

// 	struct Fields {
// 		// std::chrono::time_point<std::chrono::system_clock> starttime;
// 		std::chrono::time_point<std::chrono::system_clock> endtime;
// 		bool useTimer;
// 		// resets the timer on call;
// 		void resetTimer() {
// 			endtime = std::chrono::system_clock::now() + std::chrono::minutes{Mod::get()->getSettingValue<int64_t>("interval")}; // TODO: Replace with setting
// 		}
// 	};

// 	bool init(GJGameLevel* p0, bool p1, bool p2){
// 		if (!PlayLayer::init(p0,p1,p2)) return false;
// 		// NodeIDs::provideFor(this);
// 		m_fields->useTimer = Mod::get()->getSettingValue<bool>("playLayer");

// 		if (m_fields->useTimer) {
// 			auto tp1 = std::chrono::system_clock::now();

// 		// m_fields->starttime = std::chrono::system_clock::now();
// 		m_fields->resetTimer();
// 		}
		
	
// 		// std::time_t time = std::chrono::system_clock::to_time_t(m_fields->endtime);
// 		// log::debug("TIme is {}", std::ctime(&time));
// 		return true;
// 	}
// 		// "dependencies": [
// 		// 	{
// 		// 		"id": "geode.node-ids",
// 		// 		"version": "v1.17.0-beta.1",
// 		// 		"importance": "required"
// 		// 	}
// 		// ]

// 	void resetLevel() {
// 		PlayLayer::resetLevel();

// 		if (!m_fields->useTimer) return;

// 		// condition. checks if current time > start time + 20min
// 		auto difference = m_fields->endtime - std::chrono::system_clock::now();
// 		log::debug("{}", difference.count());
// 		/*
// 		TODO: REVERSE INEQUALITY TO <= WHEN TESTING COMPLETE
// 		 */
// 		if (difference.count() <= 0) {
// 			// calls the pause function. On windows, Pause (init) is out of line!
// 			PlayLayer::pauseGame(true);

// 			log::debug("{}", this->getID());

// 			// this posts the details of current events
// 			TimerEvent(true, this).post();
// 			m_fields->resetTimer();
			
// 		} else {
// 			log::debug("Timer not called! {}", difference.count());
// 		}
// 	}

	
// };

// #include <Geode/modify/PauseLayer.hpp>
// class $modify(TimerPauseLayer, PauseLayer) {
// 	void customSetup() override {
// 		PauseLayer::customSetup();

// 		// auto spr = CircleButtonSprite::createWithSpriteFrameName("particle_197_001.png");
// 		auto spr = CCSprite::create("TimerSettings.png"_spr);
// 		spr->setScale(.65f);
// 		CCMenuItemSpriteExtra* TimersettingsBtn = CCMenuItemSpriteExtra::create(spr, this, menu_selector(TimerPauseLayer::onTimerSettings));

// 		auto settingsMenu = this->getChildByID("right-button-menu");

// 		// adjusts the right menu to properly allow new buttons to be added
// 		settingsMenu->setLayout(
// 			ColumnLayout::create()
// 				->setGap(5.f)
// 				->setGrowCrossAxis(true)
// 				->setAxisReverse(true)
// 				->setAxisAlignment(AxisAlignment::End)
// 				,true); 
// 		// CCMenuItemSpriteExtra* settingsBtn;

// 		// for (auto* node : CCArrayExt<CCNode*>(settingsMenu->getChildren())) {
// 		// 	if (node->getID() == "options-button") {
// 		// 		settingsBtn = static_cast<CCMenuItemSpriteExtra*>(node);
// 		// 		break;
// 		// 	}
// 		// }

// 		// if (settingsBtn == nullptr) {
// 		// 	log::error("Options button could not be found!");
// 		// }

		
// 		// TimersettingsBtn->setPosition(settingsBtn->getPositionX(), settingsBtn->getPositionY() - settingsBtn->getContentWidth() * 1.5f);
// 		// TimersettingsBtn->setContentSize(settingsBtn->getScaledContentSize());
// 		settingsMenu->addChild(TimersettingsBtn);
// 		TimersettingsBtn->setID("timer-settings-btn"_spr);

// 		settingsMenu->updateLayout();
// 	}

// 	void onTimerSettings(CCObject* sender) {
// 		log::debug("Settings menu was pressed");
// 		auto layer = TimerSettingsLayer::create(this);
// 		layer->m_scene = this;
// 		layer->show();
// 	}
// };




// using EditorTimerTask = Task<bool, int>;

// //This is set up to check for each second, as an early canel would mean this event could just continue existing in memory
// EditorTimerTask startEditorTimer() {
//     return EditorTimerTask::run([](auto progress, auto hasBeenCancelled) -> EditorTimerTask::Result {
// 		log::debug("Starting editor timer!");
//         int time = Mod::get()->getSettingValue<int64_t>("interval") *60; // gets the amount of seconds 

// 		// sleeps every second, as this needs to check if the event has been cancelled to not cause any problems!
//         for (int i = 0; i < time; i++) {
//              if (hasBeenCancelled()) {
//                 return EditorTimerTask::Cancel();

//             } else if (i % 60 == 0) {
// 				progress(i / 60);
//             }
//             std::this_thread::sleep_for(std::chrono::seconds(1)); 
//         }

		
//         return true;
//     });
// }


// #include <Geode/modify/EditorUI.hpp> 
// class $modify(EditorUITimer, EditorUI) {
// 	struct Fields {
// 		bool isPlaytesting;
// 		bool pauseAfterPlaytest;
// 		EventListener<EditorTimerTask> timer;

// 		// resets timer when it is finished
// 		bool reset(EditorUITimer* sender) {
// 			if (this->timer.getFilter().isFinished()) {
// 				this->timer.bind(sender, &EditorUITimer::onEvent);
// 				this->timer.setFilter(startEditorTimer());
// 				return true;
// 			}
			
// 			return false;
// 		}

// 	};

// 	bool init(LevelEditorLayer* editorLayer) {
// 		if (!EditorUI::init(editorLayer)) return false;

// 		m_fields->pauseAfterPlaytest = false;
// 		m_fields->isPlaytesting = false;
// 		m_fields->isPlaytesting = false;
		
// 		if (Mod::get()->getSettingValue<bool>("editorLayer")) {
// 			m_fields->timer.bind(this, &EditorUITimer::onEvent);
// 			m_fields->timer.setFilter(startEditorTimer());
// 		}
		
		

// 		return true;
// 	}

// 	// sets play testing flag
// 	void onPlaytest(CCObject* sender) {
// 		EditorUI::onPlaytest(sender);
// 		m_fields->isPlaytesting = true;

// 		// m_fields->pauseAfterPlaytest = true; // temp
// 	}

// 	// unsets and checks pause layers
// 	void playtestStopped() {
// 		EditorUI::playtestStopped();

// 		m_fields->isPlaytesting = false;
		
// 	}

// 	void onPause(CCObject* sender) {
// 		EditorUI::onPause(sender);

// 		if (m_fields->pauseAfterPlaytest) {
// 			TimerEvent(true, this).post();

// 			m_fields->pauseAfterPlaytest = false;
// 		}
// 	}

// 	// resets the timer on call!
// 	void resetTimer() {
// 		if (m_fields->reset(this)) {
// 			log::debug("timer was reset!");
// 		}
// 	}

// 	// cancels the timer before reseting
// 	void forceReset() {
// 		m_fields->timer.getFilter().shallowCancel();

// 		resetTimer();
// 	}

// 	// this event happens when binded with the event listener. it will throw a new event when the timer task attatched is called.
// 	void onEvent(EditorTimerTask::Event* ev) {

// 		if (bool* result = ev->getValue()) {
// 			if (m_fields->isPlaytesting) {
// 			m_fields->pauseAfterPlaytest = true;
// 			return;
// 		}

// 		EditorUITimer::onPause(this);
// 		TimerEvent(true, this).post();


// 		} else if (int* progress = ev->getProgress()) {
// 			log::debug("min: {}", *progress);

// 		} else if (ev->isCancelled()) {
// 			return;
// 		}
// 		// validates if event shouldnt run due to condition
		
// 	}

// 	// //TODO: impl function
// 	// void resetTimer() {
// 	// 	return;
// 	// }
// };

// #include <Geode/modify/EditorPauseLayer.hpp>
// class $modify(EditorTimerPause, EditorPauseLayer) {

// 	bool init(LevelEditorLayer* lvl) {

// 		if (!EditorPauseLayer::init(lvl)) return false;

// 		// auto spr = CircleButtonSprite::createWithSpriteFrameName("particle_197_001.png");
// 		auto spr = CCSprite::create("TimerSettings.png"_spr);
// 		spr->setScale(.65f);
// 		CCMenuItemSpriteExtra* timersettingsBtn = CCMenuItemSpriteExtra::create(spr, this, menu_selector(EditorTimerPause::onTimerSettings));

// 		auto settingsMenu = this->getChildByID("settings-menu");
// 		settingsMenu->setContentHeight(this->getContentHeight()*2);
// 		settingsMenu->setPositionY(settingsMenu->getPositionY()+5.f);
// 			settingsMenu->setLayout(
// 			ColumnLayout::create()
// 				->setGap(5.f)
// 				->setGrowCrossAxis(true)
// 				// ->setAxisReverse(true)
// 				->setAxisAlignment(AxisAlignment::Center)
// 				,true); 


// 		settingsMenu->addChild(timersettingsBtn);
// 		timersettingsBtn->setID("timer-settings-btn"_spr);

// 		settingsMenu->updateLayout();
// 		return true;
// 	}

// 	// reseys the timer found in EditorUITimer
// 	void onResume(CCObject* sender) {
// 		EditorPauseLayer::onResume(sender);
// 		auto x = static_cast<EditorUITimer*>(EditorUITimer::get());

// 		x->resetTimer();

// 	}

// 	// variantion of the timer settings popup, but the layer sets its priority ABOVE the pause layer
// 	void onTimerSettings(CCObject* sender) {
// 		log::debug("Settings menu was pressed");
// 		auto layer = TimerSettingsLayer::create(this);
// 		layer->m_scene = this;
// 		layer->setTouchPriority(this->getTouchPriority() -1);
// 		layer->show();
// 	}
// };